---
title: Humility breeds Efficiency
subtitle: And everything else that your team needs
summary: 
hero: 
date: 2018-05-10 21:30 PDT
published: false
---

Despite letting this blog lie fallow for six months (!!), I’ve actually been pretty busy. Professionally, I’ve entered a new life — my first role as a tech lead, instead of an individual contributor.

My project has been rolling since January, and it’s been brimming with twists and turns. Resourcing changes. Business requirement adjustments. Strategy pivots. This is not due to poor management; it’s just part of the change and occasional chaos that are part and parcel of agency work. We try to plan; we try to mitigate; we will never succeed completely.

Through these ins and outs, the project has been more than holding together: it’s been running astonishingly well. Some of this is due to a cosmic alignment of an amazing client, an amazing problem to solve, and an amazing tech stack. But the largest part of this project’s success is due, pure and simple, to the project team itself and everyone who makes a part of it.

## What are we doing right?

I’ve spent a good chunk of time over the last several months racking my brains for what specifically we’re doing that is making this project succeed. The answer to that is: a whole lot of things.


- Team members are accountable; they take responsibility for their own and their team’s work.
- There is a high (but constructive) level of scrutiny around said work.
- We care about the project and the problems we’re solving.
- Everyone is proactive about raising questions and working through solutions.

As I reflected on these things I was seeing, I felt like I was able to peel back the phenomena and see the cause underlying everything: *No one ever bought into the sunk cost fallacy*. Not even once. Which, given several people and several months, was pretty incredibly. When client needs changed and we had to rebuild a page, no one tried to reuse code that wasn’t suited to the new paradigm. When part of our toolchain ended up being incompatible with our deploy system, we jettisoned that tool for a more universal one without a second thought.