<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>hey it's violet</title>
  <subtitle>developer &amp; human in the PNW</subtitle>
  <id>https://vgpena.github.io/</id>
  <link href="https://vgpena.github.io"/>
  <link href="https://vgpena.github.io/feed.xml" rel="self"/>
  <updated>2017-08-13T15:23:00-07:00</updated>
  <author>
    <name>Violet Peña</name>
  </author>
  <entry>
    <title>The Art of Gitting Gud</title>
    <link rel="alternate" href="https://vgpena.github.io/the-art-of-gitting-gud/"/>
    <id>https://vgpena.github.io/the-art-of-gitting-gud/</id>
    <published>2017-08-13T15:23:00-07:00</published>
    <updated>2017-08-13T16:06:08-07:00</updated>
    <author>
      <name>Violet Peña</name>
    </author>
    <summary type="html">I have always liked to write, so I thought that blogging would come naturally to me. Time and focus, though, have proven far more important than a way with words. It's time to face this reality and git gud.</summary>
    <content type="html">&lt;p&gt;It&amp;#39;s been a while since I posted something here. This has not been for lack of exciting things in my life — I wrote Arduino for the first time, trained my first neural net, and polished off a six-month-long React project.&lt;/p&gt;

&lt;p&gt;So why, then, no reports on these interesting and possibly trendy adventures? More difficult than debugging &lt;code&gt;char *&lt;/code&gt; Arrays, more daunting than teaching a machine to classify speech, is sitting down and actually writing about all of it.&lt;/p&gt;

&lt;p&gt;One main reason that I created this blog was to get better at writing. I love to write, and I&amp;#39;ve practiced it in one form or another since elementary school. Since writing is filed under &amp;quot;things I enjoy&amp;quot;, I figured that once I made a blog, posts would flow to fill its shape.&lt;/p&gt;

&lt;p&gt;I had forgotten, however, how vital it is not just to like a thing but to &lt;em&gt;allow&lt;/em&gt; yourself to like that thing. I assumed that as I did interesting things, prose would generate itself almost as a side effect, fully-formed and ready to publish.&lt;/p&gt;

&lt;p&gt;Reality has not borne this out.&lt;/p&gt;

&lt;p&gt;My writing ability — that is, my aptitude for stringing words together; for forming a narrative — will always and forever need improving, but it&amp;#39;s acceptable. (I&amp;#39;ve heard that the worst code ever written is the code that you yourself wrote six months ago. I hope that my writing follows this pattern.)&lt;/p&gt;

&lt;p&gt;But there&amp;#39;s another component of writing ability, and this is where I fall flat. This component has nothing to do with mastery of language; it&amp;#39;s concerned with letting myself &lt;em&gt;at&lt;/em&gt; language in the first place. What kind of time, what kind of space do I give myself to write? Do I allow myself to focus for long enough to even jot down an outline?&lt;/p&gt;

&lt;p&gt;It was late in freshman year of college that I realized how effortless it was to be purely a consumer and not a creator. I remember that thought (in an uncommon way) slipping small and crystalized into my mind, a pressure against my skull. I&amp;#39;ve tried to stay aware of that fact, and to keep myself in check. &lt;em&gt;Create; make something; remember&lt;/em&gt; how &lt;em&gt;to make something.&lt;/em&gt; What if I lose practice? What if I forget how to create?&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;I began to understand the effort that goes into creation, but I hadn&amp;#39;t yet been tested for my own willingness to expend that effort. Again, I was in college. I no longer had time for art projects, but I &lt;em&gt;was&lt;/em&gt; ordered to spend a month comparing editions of the &lt;em&gt;Quijote&lt;/em&gt;; I was told to write translations and program translators and dissect the differences between turn-of-the-century European authors. I began to learn how to create my own time, my own focus, but I did not achieve proficiency in it. Outside of my mandated, protected time, I dove into the internet, read books aimlessly, and, after a breakup, binge-watched all of &lt;em&gt;Avatar: the Last Airbender&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;When all was said and done, I was very good at writing when someone else made me do it. Did I have my own passions; did I find things interesting? Absolutely. But I wasn&amp;#39;t lifting a finger to express or magnify those pursuits.&lt;/p&gt;

&lt;p&gt;Years later, I began to understand what adults were getting at when they acted impressed that so-and-so was in a community choir, or taking a German class, or sowing a garden. They weren&amp;#39;t necessarily blown away by someone&amp;#39;s vocal prowess, but they deeply understood the power of inertia. It&amp;#39;s infinitely harder to do anything than it is to do nothing.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;When I created this blog, I initially &lt;em&gt;did&lt;/em&gt; allow myself to write. I recorded post ideas as they occurred to me; I drafted outlines during downtime at work; I blocked out time on alternating weekends to do the actual writing. &lt;em&gt;This&lt;/em&gt;, a voice whispered, &lt;em&gt;is temporary. Soon you&amp;#39;ll be so good at writing that it&amp;#39;ll just happen.&lt;/em&gt; I imagined that, with some practice, I&amp;#39;d be able to be struck by an idea, transmute it into words, edit a bit, and send it off into the internet vastness.&lt;/p&gt;

&lt;p&gt;I may be able to do this someday, but not yet. I made the mistake of thinking that I was almost there — &lt;em&gt;this week&lt;/em&gt; I could go away for the weekend, make no allowance for writing, and figure something out in an hour or two on Monday evening. Never mind that previous blog posts had required working four hours a day for two, three days in a row. Never mind that Monday evening would find me on the couch watching a show &lt;em&gt;to unwind&lt;/em&gt; because I was &lt;em&gt;so done with work&lt;/em&gt; after getting home from my job and prepping dinner and doing all the miscellaneous things that life requires. I would do it Tuesday? Or the next weekend? Tomorrow Me would definitely feel peppier, more inspired.&lt;/p&gt;

&lt;p&gt;This post took me days to write. Those days were not spent drafting and editing;  those days lived in the space between when this urgent, personal idea occured to me and when I put pen to paper and actually sat down and wrote the damn thing.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;And finally, I circle back around to the title of this post: &lt;em&gt;The art of gitting gud&lt;/em&gt;. I don&amp;#39;t mean Scrooge; it&amp;#39;s not about having a change of heart. I mean getting good like &lt;em&gt;Dark Souls&lt;/em&gt; like a note I have taped to my fridge, GIT GUD.&lt;/p&gt;

&lt;p&gt;&lt;div class="image-wrap image-secondary"&gt;
    &lt;img src="/images/gitgud-tumblr.png" alt="A screenshot of a tumblr update. Text says: 'I'm afraid he's been infected with the casual. He's just going to have to...to--'. Image below text is of a doctor wearing a knight's helmet, pointing to a clipboard that has 'git gud' written on it" title="A common variant of git gud" width="600px" height="408px" /&gt;
  &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&amp;quot;git gud&amp;quot; entered my consciousness when the notoriously difficult videogame &lt;em&gt;Dark Souls&lt;/em&gt; was released; it was advice frequently offered to players seeking help. While on the surface, it&amp;#39;s unhelpful and possibly adversarial, it communicates an important truth: sometimes there are no shortcuts to getting what you want. The only way forward is to practice, to sink in the hours and the effort until, someday, you git gud.&lt;/p&gt;

&lt;p&gt;Writing is something that I will improve only through practice. I need to respect it more, acknowledge its difficulty, and invest the focus and the time into working on it.&lt;/p&gt;

&lt;p&gt;I don&amp;#39;t know how long it will be for me to feel like I&amp;#39;ve improved; I don&amp;#39;t know how long until I&amp;#39;ve &lt;em&gt;actually&lt;/em&gt; improved. But for me, this is difficult. And the only way to make it easier is to git gud.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>We RISE 2017: yes please</title>
    <link rel="alternate" href="https://vgpena.github.io/we-rise-2017/"/>
    <id>https://vgpena.github.io/we-rise-2017/</id>
    <published>2017-07-01T14:06:00-07:00</published>
    <updated>2017-07-01T16:13:02-07:00</updated>
    <author>
      <name>Violet Peña</name>
    </author>
    <summary type="html">I gave my first tech talk at We RISE's inaugural conference on June 23-24, 2017. Here are my main takeaways from and thoughts on the conference.</summary>
    <content type="html">&lt;p&gt;Last week, I &lt;a href="https://docs.google.com/presentation/d/1t2-ebDUL6r09tO1s18UXWvALtZg-cQebSZpEmikYUNE/edit?usp=sharing"&gt;spoke&lt;/a&gt; at &lt;a href="https://werise.tech/"&gt;We RISE conf&lt;/a&gt; in Atlanta, GA. I&amp;#39;ll write a post on that speaking experience, but first I&amp;#39;d like to talk about the conference itself.&lt;/p&gt;

&lt;p&gt;We RISE is a Women In Tech conference put together by &lt;a href="https://www.womenwhocode.com/atl"&gt;Women Who Code ATL&lt;/a&gt;. This year was its debut year and it &lt;strong&gt;kicked ass&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;I&amp;#39;ve been to talks and conferences with pretty strong social undertones, but this was the first time I&amp;#39;d been to a major event overtly aimed at social issues and progress in tech. The sessions were pretty evenly split between more &amp;quot;typical&amp;quot; tech talks (e.g, intro to Rust) and more socially-oriented ones (e.g., creating an allyship program at your company). No matter the speaker or the subject matter, there was always an undercurrent: let&amp;#39;s get more women into and excelling in tech.&lt;/p&gt;

&lt;p&gt;We RISE was excellent, for many reasons, and I&amp;#39;ll try to break them down a bit.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;To start off with something banal and probably obvious, there were a lot of women there. Women must have made up 95 percent of attendees. I didn&amp;#39;t think I would notice, but I did, and it was amazing.&lt;/p&gt;

&lt;p&gt;I won&amp;#39;t dive deeply into this right now, but as a developer who&amp;#39;s a woman, I&amp;#39;m used to being in a minority. I&amp;#39;ve had the good fortune (or maybe instinct) to end up working with respectful, smart, helpful, supportive, amazing people. They just happen to be mostly men.&lt;/p&gt;

&lt;p&gt;I&amp;#39;ve never had a boss who wasn&amp;#39;t a man. For five years, I worked directly alongside zero women. That spell ended last month, for which I am grateful.&lt;/p&gt;

&lt;p&gt;With this as my norm, it was subtly mind-blowing to spend two days answering to and speaking with almost exclusively women. My paper was accepted by a woman; I got speaker updates from women; women answered my questions about scheduling. I went to talks given by women and my talk, in turn, was mostly attended by women. I answered womens&amp;#39; questions about WebSockets, read womens&amp;#39; slide decks, and chatted with women about programming, Atlanta, and our careers and ambitions.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;The talks specifically about social issues were valuable and necessary. It was the tech sessions, however, which got me really excited. A talk can focus completely on tech and yet be an instrument of social progress when it is given in the right context.&lt;/p&gt;

&lt;p&gt;This was the case at We RISE. Looking around the room at almost exclusively other women, I felt pride to realize that it would be &lt;em&gt;us&lt;/em&gt; going back to work on Monday energized, full of connections and ideas, ready to share and talk and create change. There would be a wave of women suggesting techniques, sharing links to new tools, and rounding up parners to work on side projects.&lt;/p&gt;

&lt;p&gt;(As a sidenote, I realized that the flipside of this is also true -- every time a conference is unwelcoming, exclusive, etc., women and other marginalized groups are taking two hits: not only are they not going to the conference itself but they also are less likely to be showing up at work with new ideas to present, discuss, and implement.)&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;I also met people from all kinds of backgrounds who got into tech for all kinds of reasons. My world mostly consists of under-40s who have worked in tech for many years. They mostly don&amp;#39;t have comp sci degrees but they have finished college, are childless, and have had generally stable lives.&lt;/p&gt;

&lt;p&gt;At We RISE, I met record numbers of people who didn&amp;#39;t fit this profile. There were droves of code school students, people entering tech in their 40s, people with children. Their concerns and goals were totally different from mine and those of most of my colleagues. They chose coding bootcamps that worked with their schedules of full-time work and childcare. They applied for jobs not that promised glory or stock options but healthcare and regular hours.&lt;/p&gt;

&lt;p&gt;Tech from the west coast and NYC tends to be splashy and dramatic. Tech from Atlanta stays out of the headlines and, honestly, it keeps such a low profile that I was surprised that there was a tech conference happening there at all.&lt;/p&gt;

&lt;p&gt;We RISE reminded me that these people are my compatriots. They&amp;#39;re my extended family. And I&amp;#39;m going to work harder to connect with and support all elements of our community.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;strong&gt;Anyway&lt;/strong&gt;: We RISE was the best and it&amp;#39;s doing some really important things for women and tech and women in tech. If you went, well done! If you didn&amp;#39;t, go next year! I had an incredible time and I am so thankful that I had the opportunity to meet rad people, give my first ever talk, and spread some inspiration and knowledge.&lt;/p&gt;

&lt;p&gt;Stay tuned, lovely people, for a post on my talk itself and lessons learned by a first-time speaker 😘&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Winning with CSS Variables</title>
    <link rel="alternate" href="https://vgpena.github.io/winning-with-css-variables/"/>
    <id>https://vgpena.github.io/winning-with-css-variables/</id>
    <published>2017-04-30T14:30:00-07:00</published>
    <updated>2017-05-12T16:09:17-07:00</updated>
    <author>
      <name>Violet Peña</name>
    </author>
    <summary type="html">CSS variables now enjoy wide cross-browser support. But what are they and why should we use them?</summary>
    <content type="html">&lt;p&gt;CSS variables, like variables in any programming language, let us reference the same values over and over. As of April 2017, they are supported by &lt;a href="http://caniuse.com/#feat=css-variables"&gt;all modern browsers&lt;/a&gt; and are an effective way to write tight, clean styles.&lt;/p&gt;

&lt;p&gt;I&amp;#39;ll be walking through the basics of CSS variables, how they are different from Sass variables, and how to provide legacy support.&lt;/p&gt;
&lt;h2 class='section-title' id=how-to-use-them&gt;&lt;a href='#how-to-use-them' class='section-inner'&gt;How to use them&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Any CSS property -- color, size, position, etc. -- can be stored in a CSS variable. Their names are all prefixed with &lt;code&gt;--&lt;/code&gt;, and you declare them by adding them to an element right where you add its other styles:&lt;/p&gt;
&lt;pre class="code css"&gt;&lt;code&gt;
&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--primary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#7F583F&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;--secondary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#F7EFD2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You refer to a CSS variable by wrapping it in &lt;code&gt;var()&lt;/code&gt;.&lt;/p&gt;
&lt;pre class="code css"&gt;&lt;code&gt;
&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--primary&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;text-decoration-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--secondary&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you look at this CSS in your web inspector, you&amp;#39;ll see that these variables are not being aliased or transpiled in any way -- your browser will tell you that an &lt;code&gt;a&lt;/code&gt;&amp;#39;s color is &lt;code&gt;--primary&lt;/code&gt;, not the hex value itself.&lt;/p&gt;

&lt;p&gt;When you use a CSS variable, you can also pass in an optional default value:&lt;/p&gt;
&lt;pre class="code css"&gt;&lt;code&gt;
&lt;span class="nt"&gt;color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;var&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;--primary&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;#7F583F&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This default value will be used if the CSS variable is not defined or available in the current scope.&lt;/p&gt;
&lt;h2 class='section-title' id=scoping-and-the-cascade&gt;&lt;a href='#scoping-and-the-cascade' class='section-inner'&gt;Scoping and the cascade&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;CSS variables act like a normal style property; a variable is available anywhere down the cascade.&lt;/p&gt;

&lt;p&gt;For example, these variables can be used by anything on the entire page:&lt;/p&gt;
&lt;pre class="code css"&gt;&lt;code&gt;
&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--primary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#7F583F&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;--secondary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#F7EFD2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And these will only be defined within elements with a certain class:&lt;/p&gt;
&lt;pre class="code css"&gt;&lt;code&gt;
&lt;span class="nc"&gt;.content&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--primary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#7F583F&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;--secondary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#F7EFD2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this second example, if you try to use &lt;code&gt;--primary&lt;/code&gt; outside of a &lt;code&gt;.content&lt;/code&gt; element, the page will still render but that style will not be applied.&lt;/p&gt;
&lt;h2 class='section-title' id=the-paradigm-custom-css-properties&gt;&lt;a href='#the-paradigm-custom-css-properties' class='section-inner'&gt;The Paradigm: custom CSS properties&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;You may have noticed a theme so far, which is that variables act just like other CSS properties. You declare variables where you set properties, they cascade in the same way, and so on.&lt;/p&gt;

&lt;p&gt;This is because CSS variables are actually nothing more than custom properties. The only difference between &lt;code&gt;--primary&lt;/code&gt; and &lt;code&gt;position&lt;/code&gt; is that &lt;code&gt;position&lt;/code&gt; always means something specific and directly affects rendering, whereas &lt;code&gt;--primary&lt;/code&gt; does nothing until it is explicitly used.&lt;/p&gt;

&lt;p&gt;CSS variables being supported by a browser means that the browser allows the user to set arbitrary, namespaced CSS properties. &lt;strong&gt;This is really exciting.&lt;/strong&gt; Just like how it&amp;#39;s exciting that media queries let us get away from resize listeners in JavaScript, CSS variables are opening the door to a future that relies less on JS and preprocessors. Speaking of which...&lt;/p&gt;
&lt;h2 class='section-title' id=better-than-sass-theming&gt;&lt;a href='#better-than-sass-theming' class='section-inner'&gt;Better than Sass: theming&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;CSS variables aren&amp;#39;t analogous to Sass variables, and in some ways, the former are vastly preferable to the latter. One of these situations is when you&amp;#39;re looking to swap out themes. On &lt;a href="http://violet.is"&gt;my personal site&lt;/a&gt;, I randomly theme the page each time it is loaded; the user can end up with any of nine color schemes.&lt;/p&gt;

&lt;p&gt;This is easily done using Sass. &lt;a href="http://now.violet.is/color-scheming"&gt;Store your color combinations in Sass maps&lt;/a&gt;, loop over them, and you can quickly create a bunch of classes that you can apply to the page:&lt;/p&gt;
&lt;pre class="code css"&gt;&lt;code&gt;
&lt;span class="nc"&gt;.theme-1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;a&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#7F583F&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;text-decoration-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#F7EFD2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.theme-2&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;a&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#D51522&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;text-decoration-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#F4F6D8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* etc */&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The CSS is easy to generate, but in the case of nine variations, you end up with eight classes&amp;#39; worth of styling that remains unused.&lt;/p&gt;

&lt;p&gt;CSS variables can achieve the same effect with no &amp;quot;extra&amp;quot; CSS. In this case, instead of using JavaScript to add a class to the page, you can use it to set specific CSS variables:&lt;/p&gt;
&lt;pre class="code javascript"&gt;&lt;code&gt;
&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'--primary'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'#7F583F'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'--secondary'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'#F7EFD2'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;These changes are picked up by every element in the cascade that uses that variable. Your styles stay cleaner and you don&amp;#39;t have to go through the middleman of applying classes.&lt;/p&gt;
&lt;h2 class='section-title' id=better-than-sass-media-queries&gt;&lt;a href='#better-than-sass-media-queries' class='section-inner'&gt;Better than Sass: media queries&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In Sass, redefining variables within media queries is something that you Just Can&amp;#39;t Do. For instance, maybe you want to swap link colors when you get to a breakpoint. You may be tempted to redeclare the variables themselves inside of the media query:&lt;/p&gt;
&lt;pre class="code scss"&gt;&lt;code&gt;
&lt;span class="nv"&gt;$primary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#7F583F&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$secondary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#F7EFD2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;$primary&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-decoration-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;$secondary&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="n"&gt;screen&lt;/span&gt; &lt;span class="nf"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min-width&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;768px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;$primary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#F7EFD2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;$secondary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#7F583F&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This, sadly, doesn&amp;#39;t work in Sass, since Sass is a preprocessor and can&amp;#39;t know anything about the conditions under which its output is used.&lt;/p&gt;

&lt;p&gt;This pattern &lt;em&gt;can&lt;/em&gt; be used with CSS variables, though:&lt;/p&gt;
&lt;pre class="code css"&gt;&lt;code&gt;
&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--primary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#7F583F&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;--secondary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#F7EFD2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--primary&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;text-decoration-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--secondary&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="n"&gt;screen&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;768px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;--primary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="m"&gt;#F7EFD2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;--secondary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#7F583F&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This works with CSS variables because all change is happening in-browser, and the variables &lt;em&gt;do&lt;/em&gt; know about the conditions under which they are being used.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;This said, I ❤️ Sass and a combination of these tools is way more powerful than each is individually. In fact, I have a great lil mixin further down the page that leverages Sass for declaring CSS variable fallbacks.&lt;/p&gt;
&lt;h2 class='section-title' id=browser-support&gt;&lt;a href='#browser-support' class='section-inner'&gt;Browser support&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;CSS variables have been in Firefox since 2014, in Chrome + Safari since March 2016, and just landed in Edge April 2017! 🎉 (Source:  &lt;a href="http://caniuse.com/#feat=css-variables"&gt;CanIUse&lt;/a&gt;.) So the good news is that they&amp;#39;re quite safe; the bad news is that you &lt;em&gt;will&lt;/em&gt; need fallbacks for Edge 14- and, naturally, all of IE.&lt;/p&gt;
&lt;h2 class='section-title' id=providing-fallbacks&gt;&lt;a href='#providing-fallbacks' class='section-inner'&gt;Providing fallbacks&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Luckily, the way to provide these fallback styles is the way we have been doing it since time immemorial:&lt;/p&gt;
&lt;pre class="code css"&gt;&lt;code&gt;
&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#7F583F&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--primary&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Declare your fallback first and your desired value second, and browsers that support your preferred property will use it. Browsers that don&amp;#39;t, such as IE 11, will still render something acceptable using your fallback value.&lt;/p&gt;
&lt;h2 class='section-title' id=easier-fallbacks-with-sass&gt;&lt;a href='#easier-fallbacks-with-sass' class='section-inner'&gt;Easier fallbacks with Sass&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you&amp;#39;re using Sass, you can automate fallbacks through a Sass mixin. Create a map of your CSS variable names and their values, and then you can look up those values in a mixin that outputs the fallback style and the preferred one.&lt;/p&gt;
&lt;pre class="code scss"&gt;&lt;code&gt;
&lt;span class="nv"&gt;$vars&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="n"&gt;primary&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#7F583F&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;--primary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;map-get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$vars&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;primary&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@mixin&lt;/span&gt; &lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$property&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$varName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nv"&gt;$property&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="nd"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;map-get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="nt"&gt;vars&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="nt"&gt;varName&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nv"&gt;$property&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="nd"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;var&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;--&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="nv"&gt;$varName&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;map-get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="nt"&gt;vars&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="nt"&gt;varName&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above mixin is used like so:&lt;/p&gt;
&lt;pre class="code scss"&gt;&lt;code&gt;
&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;@include&lt;/span&gt; &lt;span class="nd"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;primary&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and outputs the following CSS:&lt;/p&gt;
&lt;pre class="code css"&gt;&lt;code&gt;
&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#7F583F&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--primary&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#7F583F&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This way, if you change &lt;code&gt;--primary&lt;/code&gt; or its fallback, you only need to edit the &lt;code&gt;$vars&lt;/code&gt; map and your styles everywhere will update.&lt;/p&gt;

&lt;p&gt;Please note that you still need to declare your CSS variables somewhere. If you want all of your variables to be available everywhere, you can use more cool Sass to automatically add all the ones in your map to &lt;code&gt;body&lt;/code&gt; or &lt;code&gt;html&lt;/code&gt; ✨&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;If you want to see CSS variables in action, head on over to &lt;a href="http://violet.is/"&gt;my personal site&lt;/a&gt;. I had an amazing time on this small project and I&amp;#39;m looking forward to using them on something much larger 🥂&lt;/p&gt;

&lt;p&gt;If you still haven&amp;#39;t had enough of CSS variables, check out &lt;a href="https://developers.google.com/web/updates/2016/02/css-variables-why-should-you-care"&gt;this Google Developers blog post&lt;/a&gt;. They do a great job of sticking to the &amp;quot;CSS variables are custom properties&amp;quot; paradigm.&lt;/p&gt;

&lt;p&gt;Now go forth and style!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Fixing Jest Memory Usage on CircleCI</title>
    <link rel="alternate" href="https://vgpena.github.io/jest-circleci/"/>
    <id>https://vgpena.github.io/jest-circleci/</id>
    <published>2017-04-18T20:14:00-07:00</published>
    <updated>2017-04-18T20:15:48-07:00</updated>
    <author>
      <name>Violet Peña</name>
    </author>
    <summary type="html">Our CircleCI builds stopped working; the fix was to limit the number of workers Jest could use.</summary>
    <content type="html">&lt;p&gt;If you&amp;#39;re running out of memory or your tests are hanging when you run Jest tests on CircleCI, try running &lt;code&gt;jest --maxWorkers=2&lt;/code&gt; instead of just &lt;code&gt;jest&lt;/code&gt;.&lt;/p&gt;
&lt;h2 class='section-title' id=why&gt;&lt;a href='#why' class='section-inner'&gt;Why?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;On my current project, we&amp;#39;re using &lt;a href="https://facebook.github.io/jest/"&gt;Jest&lt;/a&gt; and &lt;a href="https://github.com/airbnb/enzyme"&gt;Enzyme&lt;/a&gt; to create unit tests which we run as a step in our &lt;a href="https://circleci.com/"&gt;CircleCI&lt;/a&gt; build process. Every time a PR is opened on &lt;a href="https://github.com"&gt;GitHub&lt;/a&gt;, CircleCI rebuilds the project, runs the tests, and lets us know if that PR&amp;#39;s code is stable.&lt;/p&gt;

&lt;p&gt;About 400 tests in, however, an issue emerged -- all tests would pass locally, but the CircleCI build would fail. The CircleCI logs made it clear, though, that no tests were explicitly failing. Something was making the build hang at the test step, it would time out, and the box would consider that build failed.&lt;/p&gt;

&lt;p&gt;We realized that the issue might lie with how Jest spawns child processes. Although test output appears linear, the tests by default run in parallel, using up to as many workers as there are cores on the machine. Maybe Jest was spinning off the wrong number of workers and this was causing memory problems on our CI box.&lt;/p&gt;

&lt;p&gt;The first thing I tried was running &lt;code&gt;jest --runInBand&lt;/code&gt;, which makes Jest run all tests in the same process (&lt;a href="https://facebook.github.io/jest/docs/cli.html"&gt;more info on Jest CLI options&lt;/a&gt;). This turned out not to play well with things that need a headless DOM rendered via &lt;a href="https://github.com/tmpvar/jsdom"&gt;JSDOM&lt;/a&gt;. We use &lt;a href="https://github.com/Khan/aphrodite/"&gt;Aphrodite&lt;/a&gt; for styling, and &lt;code&gt;runInBand&lt;/code&gt; seemed to prevent this DOM from being rendered, which meant Aphrodite couldn&amp;#39;t find any elements to attach itself to.&lt;/p&gt;

&lt;p&gt;Next, I tried &lt;code&gt;jest --maxWorkers=1&lt;/code&gt;, but this seems to do the same thing as &lt;code&gt;runInBand&lt;/code&gt;, and I got the same result. &lt;code&gt;--maxWorkers=2&lt;/code&gt;, however, let the JSDOM render &lt;em&gt;and&lt;/em&gt; all the tests run. I put this change in our &lt;a href="https://circleci.com/docs/1.0/configuration/"&gt;Circle config file&lt;/a&gt; and the subsequent PR was the first one that built properly in over a week.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Since then, our CircleCI builds have been stable. Tests take about 46 seconds to run on our CI box now, compared to 9 seconds locally, where we don&amp;#39;t need to limit workers.&lt;/p&gt;

&lt;p&gt;Thanks for reading this far! Now go out there, write tests, and integrate without fear.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Turning Subreddits Into Chatbots</title>
    <link rel="alternate" href="https://vgpena.github.io/chatbots/"/>
    <id>https://vgpena.github.io/chatbots/</id>
    <published>2017-04-02T22:26:00-07:00</published>
    <updated>2017-04-03T07:36:39-07:00</updated>
    <author>
      <name>Violet Peña</name>
    </author>
    <summary type="html">We were given two days and the theme of 'echo chamber'. We used subreddits to create chatbots and had them converse.</summary>
    <content type="html">&lt;p&gt;This past weekend, I attended &lt;a href="http://www.arthackday.net/events/echo-chamber"&gt;Art Hack Day: Echo Chamber&lt;/a&gt;. On Friday evening, the participants introduced ourselves and shared ideas; by Sunday evening, I had, as part of a group, created and exhibited Reddit-powered chatbots. It was an amazing, exhilarating weekend and I came out of it tired but more inspired than I thought possible.&lt;/p&gt;
&lt;h2 class='section-title' id=art-hack-the-planet&gt;&lt;a href='#art-hack-the-planet' class='section-inner'&gt;(Art) Hack the Planet&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;figure role="img" class="image-wrap image-secondary"&gt;
    &lt;img src="/images/ahd/pnca.jpg" alt="A photo of a blocky, light grey building. The letters &amp;quot;PNCA&amp;quot; run up its side." title="The PNCA building in downtown Portland" width="500px" height="667px" /&gt;
  &lt;figcaption&gt;
    &lt;p&gt;PNCA -- my home for the weekend. &lt;a href="http://gabesimagination.com/"&gt;credit&lt;/a&gt;&lt;/p&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.arthackday.net/"&gt;Art Hack Day&lt;/a&gt; (AHD) is a series of events that brings together tecchies and artists. Participants divide into ad hoc groups, work on art projects for a day and a half, and then the weekend culminates in an art show. This time around, we were in the uber-beautiful &lt;a href="http://pnca.edu/"&gt;PNCA&lt;/a&gt; and sponsored in part by their interdisciplinary &lt;a href="http://pnca.edu/makethinkcode"&gt;Make+Think+Code&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Part of what&amp;#39;s lovely about AHD is that, as the name implies, they go out of their way to create a balance between art and tech. This isn&amp;#39;t a hack day to make an app or redesign a website; it&amp;#39;s a time to collaborate with people of different skill sets, push your boundaries, and create something interesting but not necessarily useful.&lt;/p&gt;
&lt;h2 class='section-title' id=do-you-want-to-build-a-chatbot&gt;&lt;a href='#do-you-want-to-build-a-chatbot' class='section-inner'&gt;Do You Want to Build a Chatbot?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The theme of this AHD was &amp;quot;Echo Chamber&amp;quot;, particularly with an eye towards the internet and social media, which easily become echo chambers that do little more than affirm our already-held beliefs. This creative prompt got me thinking about chatbots, which I&amp;#39;ve been into since I was introduced to &lt;a href="https://en.wikipedia.org/wiki/SmarterChild"&gt;SmarterChild&lt;/a&gt; in middle school.&lt;/p&gt;

&lt;p&gt;&lt;figure role="img" class="image-wrap image-secondary"&gt;
    &lt;img src="/images/ahd/smarterchild.jpg" alt="A screengrab of an old AIM conversation with SmarterChild." title="A screengrab of a typically awful conversation with SmarterChild" width="242px" height="386px" /&gt;
  &lt;figcaption&gt;
    &lt;p&gt;A typical interaction with SmarterChild. &lt;a href="http://yaleherald.com/bullblog/aim-bots-where-are-they-now/"&gt;source&lt;/a&gt;&lt;/p&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;On Friday evening, as we went around the room and introduced ourselves, a couple others indicated an interest in chatbots -- &lt;a href="https://twitter.com/ginkko"&gt;Alec Arme&lt;/a&gt; and &lt;a href="http://www.poinyent.com/"&gt;Steve August&lt;/a&gt;. We got together and started brainstorming ideas, which ranged from assigning points to bots&amp;#39; arguments and picking a winner, to creating bots that represented different Greek gods. When we left for the night, we knew that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;we wanted to make several bots, not just one;&lt;/li&gt;
&lt;li&gt;those bots would be trained or given personalities based on different data sources; and&lt;/li&gt;
&lt;li&gt;we wanted those bots to somehow talk to each other.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At this point, I should mention that none of us had experience with chatbots, and that none of us had worked together before. We have very different skill sets -- Alec works mostly with VR, Steve specializes in psychology and using tech to create calm, and I do web development and browser-based installations. Whatever our end product would be, we knew it wouldn&amp;#39;t be typical.&lt;/p&gt;
&lt;h2 class='section-title' id=enter-bigquery&gt;&lt;a href='#enter-bigquery' class='section-inner'&gt;Enter BigQuery&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Any bot needs source material, and we had decided that our bots would be trained on internet communities that could be construed as echo chambers. Even before we were sure what the exact training material would be, we knew that we would have to process a &lt;strong&gt;lot&lt;/strong&gt; of data in order to accurately reflect those communities.&lt;/p&gt;

&lt;p&gt;When I think &amp;quot;big data&amp;quot;, I think of &lt;a href="https://cloud.google.com/bigquery/"&gt;Google BigQuery&lt;/a&gt;. I hadn&amp;#39;t worked with it before, but I &lt;strong&gt;had&lt;/strong&gt; had the pleasure of working alongside a team creating &lt;a href="http://www.instrument.com/work/google-next-cloud-platform"&gt;a BigQuery-powered trivia game&lt;/a&gt;, so I was already familiar with BigQuery as a service and knew the basics of how to use it.&lt;/p&gt;

&lt;p&gt;Essentially, BigQuery is a pay-as-you-go service that lets you run SQL queries over humongous data sets in disgustingly little time. It opens the door to people like me, who want to crunch dozens of gigabytes of data, but don&amp;#39;t have access to powerful machines.&lt;/p&gt;

&lt;p&gt;As if this weren&amp;#39;t enough, BigQuery hosts &lt;a href="https://www.reddit.com/r/bigquery/wiki/datasets"&gt;tons of publically available datasets&lt;/a&gt;, so we didn&amp;#39;t have to manually write scrapes of comment sections or format those results to be BigQuery-compatible. (My favorite dataset is this 452GB one of &lt;a href="https://github.com/odota/core/issues/924"&gt;DotA gameplay data&lt;/a&gt;).&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;The dataset that spoke to us the most was the one of &lt;a href="https://bigquery.cloud.google.com/dataset/fh-bigquery:reddit_comments"&gt;all Reddit comments since 2005&lt;/a&gt;. &lt;a href="https://www.reddit.com/"&gt;Reddit&lt;/a&gt;, &amp;quot;the front page of the internet&amp;quot;, is divided into subreddits dedicated to specific hobbies or interests. As such, they can easily become echo chambers where all participants agree with each other and validate each others&amp;#39; beliefs.&lt;/p&gt;

&lt;p&gt;We decided to base our bots off of specific subreddits&amp;#39; comments from December 2016 to February 2017 -- a cool 52.9GB of data in all. But how would we turn this data source into usable material for chatbots?&lt;/p&gt;
&lt;h2 class='section-title' id=creating-a-training-corpus&gt;&lt;a href='#creating-a-training-corpus' class='section-inner'&gt;Creating a Training Corpus&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When I want to generate language, I immediately think of &lt;a href="https://en.wikipedia.org/wiki/Markov_chain"&gt;Markov chains&lt;/a&gt;. Also known as Markov models, these are processes that let us use statistics collected about an input to probabilistically generate an output.&lt;/p&gt;

&lt;p&gt;You can create a Markov chain by going through a body of text (&amp;quot;training corpus&amp;quot;) and counting how many times each word occurs, and for each word, what words follow it and how often. You create a profile of the text: how often can you expect a particular word to come up, and what other words you expect to follow it? You end up with a formula for creating utterances &amp;quot;in the style&amp;quot; of your training corpus.&lt;/p&gt;

&lt;p&gt;To use subreddits as a training corpus, we ran the following SQL query in BigQuery against the aforementioned Reddit comment tables:&lt;/p&gt;
&lt;pre class="code sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nextword&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;COUNT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;c&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="k"&gt;SELECT&lt;/span&gt;
    &lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;LEAD&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;OVER&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;ORDER&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;nextword&lt;/span&gt;
  &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="k"&gt;SELECT&lt;/span&gt;
      &lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="n"&gt;pos&lt;/span&gt;
    &lt;span class="k"&gt;FROM&lt;/span&gt;
      &lt;span class="n"&gt;FLATTEN&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="k"&gt;SELECT&lt;/span&gt;
          &lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="k"&gt;POSITION&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;pos&lt;/span&gt;
        &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="k"&gt;SELECT&lt;/span&gt;
            &lt;span class="n"&gt;SPLIT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;REGEXP_REPLACE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;LOWER&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;'(&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;)'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;' '&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s1"&gt;' '&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt;
          &lt;span class="k"&gt;FROM&lt;/span&gt;
            &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;fh&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;bigquery&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;reddit_comments&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;2017&lt;/span&gt;&lt;span class="n"&gt;_02&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;fh&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;bigquery&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;reddit_comments&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;2017&lt;/span&gt;&lt;span class="n"&gt;_01&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;fh&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;bigquery&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;reddit_comments&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;2016&lt;/span&gt;&lt;span class="n"&gt;_12&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;subreddit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'dankmemes'&lt;/span&gt; &lt;span class="k"&gt;LIMIT&lt;/span&gt; &lt;span class="mi"&gt;10000&lt;/span&gt;
         &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;))&lt;/span&gt;
         &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="k"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="k"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nextword&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;nextword&lt;/span&gt;
&lt;span class="k"&gt;GROUP&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt;
  &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
  &lt;span class="k"&gt;ORDER&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt;
  &lt;span class="k"&gt;c&lt;/span&gt; &lt;span class="k"&gt;DESC&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is a modified version of the code provided by &lt;a href="https://twitter.com/felipehoffa"&gt;Felipe Hoffa&lt;/a&gt; on &lt;a href="http://blog.gdeltproject.org/making-ngrams-bigquery-scale/"&gt;the GDELT blog&lt;/a&gt;. It reads in the specified tables (&lt;code&gt;[fh-bigquery:reddit_comments.2017_02]&lt;/code&gt;, etc.) and creates a new table of words, &amp;#39;nextword&amp;#39;s, and the count (&amp;#39;c&amp;#39;) of that combination.&lt;/p&gt;

&lt;p&gt;Training corpora were created by swapping out the subreddit we looked for -- &lt;code&gt;WHERE subreddit = &amp;#39;dankmemes&amp;#39;&lt;/code&gt; makes our query only count words in comments that had &lt;code&gt;dankmemes&lt;/code&gt; listed as a subreddit. We cleaned up the data a bit to make processing easier -- words were all lowercased so we wouldn&amp;#39;t have to deal with capitalization, and we stripped out line breaks.&lt;/p&gt;

&lt;p&gt;We created nine training corpora this way, based on output tables ranging in size from 513KB to 7.16MB. Tolstoy&amp;#39;s 864-page &lt;em&gt;Anna Karenina&lt;/em&gt;, for comparison, takes up about 1.9MB. We had plenty of data; we were ready to make some bots.&lt;/p&gt;
&lt;h2 class='section-title' id=back-to-the-frontend&gt;&lt;a href='#back-to-the-frontend' class='section-inner'&gt;Back to the Frontend&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While I was getting the data and reworking it into a usable form, Alec and Steve were putting together our project&amp;#39;s frontend. We had decided that we wanted to make something that looked like a chat app, and have our bots appear to text each other as they conversed.&lt;/p&gt;

&lt;p&gt;Since the bulk of my work has been web-based, even my installations have leaned heavily on Google Chrome as a frontend. Alec, however, is most experienced developing with &lt;a href="https://unity3d.com/"&gt;Unity&lt;/a&gt;, a game engine used widely for 3D games and Virtual Reality experiences. I associate Unity so tightly with those types of projects that I was astounded when Alec volunteered to make our 2D frontend in Unity. It turns out that Unity can also be a powerful way to make UIs and other 2D products, and that Alec knew a Unity plugin that would let us create a connection between his Unity frontend and my &lt;a href="https://nodejs.org/"&gt;Node.js&lt;/a&gt; backend with WebSockets.&lt;/p&gt;

&lt;p&gt;Alec and Steve teamed up on creating a frontend that mimicked an Android texting UI, complete with user avatars pulled from the subreddits&amp;#39; header images. We would randomly choose two bots and have them &amp;quot;converse&amp;quot; with each other. The conversation would go on for around twenty utterances per bot; then we would choose two new bots and start again.&lt;/p&gt;

&lt;p&gt;&lt;figure role="img" class="image-wrap image-secondary"&gt;
    &lt;img src="/images/ahd/test1.jpg" alt="A photo of a laptop screen showing our project. A mocked Android texting UI shows language generated by our bots." title="One of our first tests." width="800px" height="1067px" /&gt;
  &lt;figcaption&gt;
    &lt;p&gt;It&amp;#39;s alive! One of our first tests.&lt;/p&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;The frontend sent, via WebSockets, an event to the backend requesting an utterance from a specific bot. The backend would generate an utterance on the spot and send that text back. The frontend controlled the conversation flow; it would wait to request a new utterance based on how long the previous utterance would take to read.&lt;/p&gt;

&lt;p&gt;We set up a router to let our laptops talk to each other via local IPs (the building&amp;#39;s WiFi wasn&amp;#39;t cooperating), and voil&amp;agrave; -- we were able to run our first tests. The actual installation would have the server and frontend on the same computer; we wouldn&amp;#39;t even need an internet connection.&lt;/p&gt;
&lt;h2 class='section-title' id=making-bots-chat&gt;&lt;a href='#making-bots-chat' class='section-inner'&gt;Making Bots Chat&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The last stage of the project was cleanup -- on the frontend, finessing assets and behavior; on the backend, stripping out badly-encoded characters (which appeared as &amp;#65533;) and trying to get the bots to talk to each other.&lt;/p&gt;

&lt;p&gt;So far we had been generating utterances apropos of nothing, probabilistically picking a starting word from a bot&amp;#39;s corpus and building the rest of the utterance from there. Our goal, though, was to make the bots&amp;#39; texting feel like a conversation, which meant relating their utterances somehow. One way to do this is to relate utterances to predetermined &amp;quot;topics&amp;quot; and pick appropriate responses filed under that same topic. Steve had looked into achieving this with &lt;a href="http://www.alicebot.org/aiml.html"&gt;AIML&lt;/a&gt;, a markup language for chatbots, earlier on in the weekend. That approach, however, required a smaller, more manually-determined set of utterances than what we had on hand.&lt;/p&gt;

&lt;p&gt;We decided it would be enough to get the bots to use the same word across utterances, even if we couldn&amp;#39;t guarantee a match between their utterances&amp;#39; actual themes.&lt;/p&gt;

&lt;p&gt;We started tracking every utterance in the conversation, ranking the words in an utterance from least- to most-used, assuming that the most common words (&amp;quot;a&amp;quot;, &amp;quot;the&amp;quot;, &amp;quot;I&amp;quot;) are the least important to establishing a theme and that more unique words (&amp;quot;Iraq&amp;quot;, &amp;quot;congress&amp;quot;, &amp;quot;emails&amp;quot;) are more indicative of an utterance&amp;#39;s theme. When generating a new utterance, we would pick its starting word by trying to find one of the more &amp;quot;interesting&amp;quot; words from the previous utterance in the current bot&amp;#39;s corpus. Some words were only known by certain bots, but more often than not, the desired word was known by both bots, albeit with different connotations.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s a sample exchange between two bots that demonstrates &amp;quot;staying on topic&amp;quot;:&lt;/p&gt;

      &lt;blockquote&gt;
        &lt;p&gt;&lt;strong&gt;dankmemes&lt;/strong&gt;: rights die.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The_Donald&lt;/strong&gt;: die.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;dankmemes&lt;/strong&gt;: what yeah, dank [deleted] dank great?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The_Donald&lt;/strong&gt;: yeah, oh the third was woman drones. is officials.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;dankmemes&lt;/strong&gt;: yeah, you bot, eating questions re-submit harder being ^^/r/ayylmao2dongerbot thrusting regret a the in actually methinks. basking that get brethren, this more to words.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The_Donald&lt;/strong&gt;: yeah, oh so.. don&amp;#39;t hate what that wtf!!!&lt;/p&gt;

        &lt;cite&gt;
          
        &lt;/cite&gt;
      &lt;/blockquote&gt;
    &lt;h2 class='section-title' id=opening-night&gt;&lt;a href='#opening-night' class='section-inner'&gt;Opening Night&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;AHD culminated in an art show taking over the ground floor and mezzanine of PNCA. Every group installed its project and set it up to be on display for several hours that night.&lt;/p&gt;

&lt;p&gt;&lt;div class="image-wrap image-primary"&gt;
    &lt;img src="/images/ahd/show1.jpg" alt="A photo taken from overhead showing groups of people clustered around various artworks displayed on small white tables." title="The AHD exhibition at PNCA." width="800px" height="600px" /&gt;
  &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;The diversity of skills brought into AHD meant that a huge variety of projects came out of it. There were Kinect and HoloLens projects; there was 16mm film and a dating app for animated monsters; there was a DDR dance pad that made emoji rain across a VR scene.&lt;/p&gt;

&lt;p&gt;Our project was surprisingly easy to set up and ran beautifully all evening. We ran an exported Unity app on a Mac Mini and projected it into a fake smartphone cut out of foamcore.&lt;/p&gt;

&lt;p&gt;&lt;figure role="img" class="image-wrap image-primary"&gt;
    &lt;img src="/images/ahd/group.jpg" alt="A photo of three people, two men and a woman. They stand next to a projector, in front of a false wall onto which is projected a mimicked texting exchange." title="My group poses with our chatbots." width="800px" height="600px" /&gt;
  &lt;figcaption&gt;
    &lt;p&gt;Live at PNCA! From left to right: Steve, Alec, and me.&lt;/p&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;Visitors ebbed and flowed through the gallery. Since our project wasn&amp;#39;t interactive, I had been afraid that people might not feel interested or engaged, but we ended up with a piece that still drew visitors in and held their attention. Part of the interest, I think, came from being able to see a very topical, polemic bot (like &lt;code&gt;/r/The_Donald&lt;/code&gt;), or to see bots of opposing views (&lt;code&gt;/r/Feminism&lt;/code&gt; and &lt;code&gt;/r/TheRedPill&lt;/code&gt;, for example) matched against each other.&lt;/p&gt;

&lt;p&gt;&lt;figure role="img" class="image-wrap image-primary"&gt;
    &lt;img src="/images/ahd/show2.jpg" alt="A photo taken from overhead shows groups of people looking at art. One group is clustered around a projector; one person points at the projection." title="Our art at the opening show." width="800px" height="600px" /&gt;
  &lt;figcaption&gt;
    &lt;p&gt;people ❤️ looking ❤️ at ❤️ our ❤️ art&lt;/p&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;I loved working on this project and am looking for ways to keep working with it. Maybe as a foray into machine learning?&lt;/p&gt;

&lt;p&gt;Thanks to Alec and Steve for being amazing teammates and setting us all up for success on a super fun, challenging project. I look forward to lots more art-hacking in the future.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;em&gt;This was my first blog post that wasn&amp;#39;t about making this blog! Stay tuned for a post about Markov chains.&lt;/em&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Blogging with Middleman: Partials Are Magic</title>
    <link rel="alternate" href="https://vgpena.github.io/partials-are-magic/"/>
    <id>https://vgpena.github.io/partials-are-magic/</id>
    <published>2017-03-21T10:32:00-07:00</published>
    <updated>2017-05-12T16:09:17-07:00</updated>
    <author>
      <name>Violet Peña</name>
    </author>
    <summary type="html">While making this blog, I realized I wanted a flexible way to handle media and captions. The solution: to create Middleman partials. I walk through what partials are, how and when you should use them, and how to make them, using code that is live on this blog.</summary>
    <content type="html">&lt;p&gt;Now that you&amp;#39;ve got your &lt;a href="/blogging-with-middleman"&gt;Middleman blog set up&lt;/a&gt;, let&amp;#39;s use &lt;a href="https://middlemanapp.com/basics/partials/"&gt;Partials&lt;/a&gt; to customize your posts.&lt;/p&gt;

&lt;p&gt;&lt;figure role="img" class="image-wrap image-secondary"&gt;
    &lt;img src="/images/spongebob.jpg" alt="Spongebob holds up his hands; a rainbow arches between his palms." title="Spongebob doing that rainbow thing" width="1675px" height="1026px" /&gt;
  &lt;figcaption&gt;
    &lt;p&gt;This image brought to you by Middleman Partials &amp;reg;&lt;/p&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;Partials are small templates that can be inserted into larger layouts. They&amp;#39;re great for bits of content that you want rendered on multiple pages, like header or footer links.&lt;/p&gt;

&lt;p&gt;Moreover, partials can also be brought directly into your blog posts, layering on top of your Markdown to create even richer, more flexible content.&lt;/p&gt;
&lt;h2 class='section-title' id=use-case&gt;&lt;a href='#use-case' class='section-inner'&gt;Use Case&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While working on this blog, I realized that I wanted to display images in four contexts: large or small; and as a freestanding image, or paired with a caption. If an image came with caption text, I wanted to wrap the image in a &lt;code&gt;&amp;lt;figure&amp;gt;&lt;/code&gt; element with an accompanying &lt;code&gt;&amp;lt;figcaption&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Markdown, unfortunately, doesn&amp;#39;t provide a way to mark up &lt;code&gt;&amp;lt;figure&amp;gt;&lt;/code&gt; elements. It allows raw HTML, such as &lt;span style="color:red; font-weight: bold;"&gt;this red text&lt;/span&gt;, but that wouldn&amp;#39;t have been a sustainable workaround. If the &lt;code&gt;&amp;lt;figure&amp;gt;&lt;/code&gt; spec changed, I would have to go around and update every post that used it.&lt;/p&gt;
&lt;h2 class='section-title' id=creating-a-partial&gt;&lt;a href='#creating-a-partial' class='section-inner'&gt;Creating a partial&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The solution was to create a partial template that could render media in different contexts. The file itself looks like this:&lt;/p&gt;
&lt;pre class="code erb"&gt;&lt;code&gt;
&lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;locals&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:caption&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;figure&lt;/span&gt; &lt;span class="na"&gt;role=&lt;/span&gt;&lt;span class="s"&gt;"img"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"image-wrap image-&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;locals&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:size&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"image-wrap image-&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;locals&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:size&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;image_tag&lt;/span&gt; &lt;span class="n"&gt;locals&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:src&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;alt: &lt;/span&gt;&lt;span class="n"&gt;locals&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:alt&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="ss"&gt;title: &lt;/span&gt;&lt;span class="n"&gt;locals&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:title&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="ss"&gt;width: &lt;/span&gt;&lt;span class="n"&gt;locals&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:width&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;height: &lt;/span&gt;&lt;span class="n"&gt;locals&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:height&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;locals&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:caption&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;figcaption&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;locals&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:caption&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/figcaption&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/figure&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The partial checks the &lt;code&gt;locals&lt;/code&gt; I pass in for a caption and renders a different element accordingly. &lt;code&gt;locals&lt;/code&gt; values also provide the path and other attributes of the image, and determine what styling the element will receive.&lt;/p&gt;

&lt;p&gt;I include this partial by writing the following straight in my Markdown:&lt;/p&gt;

&lt;p&gt;&lt;div class="image-wrap image-secondary"&gt;
    &lt;img src="/images/ponies.png" alt="The main characters of &amp;quot;My Little Pony: Friendship is Magic&amp;quot; crowd the camera." title="The main characters from &amp;quot;My Little Pony: Friendship is Magic&amp;quot;" width="900px" height="809px" /&gt;
  &lt;/div&gt;&lt;/p&gt;
&lt;pre class="code erb"&gt;&lt;code&gt;
&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;partial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:media&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:locals&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="ss"&gt;:src&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'ponies.png'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="ss"&gt;:title&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'The main characters from "My Little Pony: Friendship is Magic"'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="ss"&gt;:alt&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'The main characters of "My Little Pony: Friendship is Magic" crowd the camera.'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="ss"&gt;:size&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'secondary'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="ss"&gt;:width&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'900px'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="ss"&gt;:height&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'809px'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This ERB tells Middleman to find the &amp;quot;media&amp;quot; partial and pass in the &lt;code&gt;locals&lt;/code&gt; specified. Partials are located relative to &lt;code&gt;/source&lt;/code&gt;, so this particular partial is found at &lt;code&gt;/source/media.erb&lt;/code&gt;.&lt;/p&gt;
&lt;h2 class='section-title' id=using-a-partial&gt;&lt;a href='#using-a-partial' class='section-inner'&gt;Using a partial&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Finally, we need to tell Middleman that it will be seeing ERB in our posts. By default, Middleman only expects Markdown in blog posts; hence the &lt;code&gt;.markdown&lt;/code&gt; extension of all the files in &lt;code&gt;/source/articles&lt;/code&gt;. It can&amp;#39;t yet parse ERB.&lt;/p&gt;

&lt;p&gt;Thanks to Middleman&amp;#39;s &lt;a href="/blogging-with-middleman/#writing-and-using-scss"&gt;super cool extension chaining&lt;/a&gt;, add an &lt;code&gt;.erb&lt;/code&gt; to the end of your post&amp;#39;s extension, and you&amp;#39;re done! &lt;code&gt;.markdown.erb&lt;/code&gt; works, as does &lt;code&gt;.md.erb&lt;/code&gt;, or any set of extensions where the ERB-related extension comes after the Markdown-related one.&lt;/p&gt;

&lt;p&gt;These extensions tell Middleman to make one pass of the file and render any ERB that it finds. It then makes a second pass and renders any Markdown found; the file is now entirely converted to HTML.&lt;/p&gt;

&lt;p&gt;Give all new blog posts these extensions by changing this line in your &lt;code&gt;config.rb&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="code ruby"&gt;&lt;code&gt;
&lt;span class="c1"&gt;# blog.default_extension = ".markdown"&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;to something like&lt;/p&gt;
&lt;pre class="code ruby"&gt;&lt;code&gt;
&lt;span class="n"&gt;blog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;default_extension&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;".markdown.erb"&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This means that all new blog posts created via &lt;code&gt;middleman article &amp;lt;articleName&amp;gt;&lt;/code&gt; will have that extension and be ready to accept partials.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;I hope you are ~&lt;strong&gt;fully&lt;/strong&gt;~ convinced of the power of partials. I may revisit them again when I change my media partials from using &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; to &lt;code&gt;&amp;lt;picture&amp;gt;&lt;/code&gt;, which will be a journey in its own right.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Coming next: custom Markdown rendering and syntax highlighting in code blocks. Read my first Middleman post &lt;a href="/blogging-with-middleman/"&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</content>
  </entry>
</feed>
