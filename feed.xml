<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>hey it's violet</title>
  <subtitle>developer &amp; human in the PNW</subtitle>
  <id>https://vgpena.github.io</id>
  <link href="https://vgpena.github.io"/>
  <link href="https://vgpena.github.io/feed.xml" rel="self"/>
  <updated>2017-03-21T10:32:00-07:00</updated>
  <author>
    <name>Violet Peña</name>
  </author>
  <entry>
    <title>Blogging with Middleman: Partials Are Magic</title>
    <link rel="alternate" href="https://vgpena.github.io/partials-are-magic/"/>
    <id>https://vgpena.github.io/partials-are-magic/</id>
    <published>2017-03-21T10:32:00-07:00</published>
    <updated>2017-03-21T10:31:46-07:00</updated>
    <author>
      <name>Violet Peña</name>
    </author>
    <content type="html">&lt;p&gt;
      Now that you&amp;#39;ve got your &lt;a href="/blogging-with-middleman"&gt;Middleman blog set up&lt;/a&gt;, let&amp;#39;s use &lt;a href="https://middlemanapp.com/basics/partials/"&gt;Partials&lt;/a&gt; to customize your posts.
    &lt;/p&gt;&lt;p&gt;
        &lt;figure role="img" class="image-wrap image-secondary"&gt;
    &lt;img src="/images/spongebob.jpg" alt="Spongebob holds up his hands; a rainbow arches between his palms." title="Spongebob doing that rainbow thing" width="1675px" height="1026px" /&gt;
  &lt;figcaption&gt;
    &lt;p&gt;This image brought to you by Middleman Partials &amp;reg;&lt;/p&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;
    &lt;/p&gt;&lt;p&gt;
      Partials are small templates that can be inserted into larger layouts. They&amp;#39;re great for bits of content that you want rendered on multiple pages, like header or footer links.
    &lt;/p&gt;&lt;p&gt;
      Moreover, partials can also be brought directly into your blog posts, layering on top of your Markdown to create even richer, more flexible content.
    &lt;/p&gt;&lt;h2 class='section-title' id=use-case&gt;&lt;a href='#use-case' class='section-inner'&gt;Use Case&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;
      While working on this blog, I realized that I wanted to display images in four contexts: large or small; and as a freestanding image, or paired with a caption. If an image came with caption text, I wanted to wrap the image in a &lt;code&gt;&amp;lt;figure&amp;gt;&lt;/code&gt; element with an accompanying &lt;code&gt;&amp;lt;figcaption&amp;gt;&lt;/code&gt;.
    &lt;/p&gt;&lt;p&gt;
      Markdown, unfortunately, doesn&amp;#39;t provide a way to mark up &lt;code&gt;&amp;lt;figure&amp;gt;&lt;/code&gt; elements. It allows raw HTML, such as &lt;span style="color:red; font-weight: bold;"&gt;this red text&lt;/span&gt;, but that wouldn&amp;#39;t have been a sustainable workaround. If the &lt;code&gt;&amp;lt;figure&amp;gt;&lt;/code&gt; spec changed, I would have to go around and update every post that used it.
    &lt;/p&gt;&lt;h2 class='section-title' id=creating-a-partial&gt;&lt;a href='#creating-a-partial' class='section-inner'&gt;Creating a partial&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;
      The solution was to create a partial template that could render media in different contexts. The file itself looks like this:
    &lt;/p&gt;&lt;pre class="code erb"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;locals&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:caption&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;figure&lt;/span&gt; &lt;span class="na"&gt;role=&lt;/span&gt;&lt;span class="s"&gt;"img"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"image-wrap image-&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;locals&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:size&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"image-wrap image-&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;locals&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:size&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;image_tag&lt;/span&gt; &lt;span class="n"&gt;locals&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:src&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;alt: &lt;/span&gt;&lt;span class="n"&gt;locals&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:alt&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="ss"&gt;title: &lt;/span&gt;&lt;span class="n"&gt;locals&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:title&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="ss"&gt;width: &lt;/span&gt;&lt;span class="n"&gt;locals&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:width&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;height: &lt;/span&gt;&lt;span class="n"&gt;locals&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:height&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;locals&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:caption&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;figcaption&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;locals&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:caption&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/figcaption&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/figure&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;
      The partial checks the &lt;code&gt;locals&lt;/code&gt; I pass in for a caption and renders a different element accordingly. &lt;code&gt;locals&lt;/code&gt; values also provide the path and other attributes of the image, and determine what styling the element will receive.
    &lt;/p&gt;&lt;p&gt;
      I include this partial by writing the following straight in my Markdown:
    &lt;/p&gt;&lt;p&gt;
        &lt;div class="image-wrap image-secondary"&gt;
    &lt;img src="/images/ponies.png" alt="The main characters of &amp;quot;My Little Pony: Friendship is Magic&amp;quot; crowd the camera." title="The main characters from &amp;quot;My Little Pony: Friendship is Magic&amp;quot;" width="900px" height="809px" /&gt;
  &lt;/div&gt;
    &lt;/p&gt;&lt;pre class="code erb"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;partial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:media&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:locals&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="ss"&gt;:src&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'ponies.png'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="ss"&gt;:title&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'The main characters from "My Little Pony: Friendship is Magic"'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="ss"&gt;:alt&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'The main characters of "My Little Pony: Friendship is Magic" crowd the camera.'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="ss"&gt;:size&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'secondary'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="ss"&gt;:width&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'900px'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="ss"&gt;:height&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'809px'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;
      This ERB tells Middleman to find the &amp;quot;media&amp;quot; partial and pass in the &lt;code&gt;locals&lt;/code&gt; specified. Partials are located relative to &lt;code&gt;/source&lt;/code&gt;, so this particular partial is found at &lt;code&gt;/source/media.erb&lt;/code&gt;.
    &lt;/p&gt;&lt;h2 class='section-title' id=using-a-partial&gt;&lt;a href='#using-a-partial' class='section-inner'&gt;Using a partial&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;
      Finally, we need to tell Middleman that it will be seeing ERB in our posts. By default, Middleman only expects Markdown in blog posts; hence the &lt;code&gt;.markdown&lt;/code&gt; extension of all the files in &lt;code&gt;/source/articles&lt;/code&gt;. It can&amp;#39;t yet parse ERB.
    &lt;/p&gt;&lt;p&gt;
      Thanks to Middleman&amp;#39;s &lt;a href="/blogging-with-middleman/#writing-and-using-scss"&gt;super cool extension chaining&lt;/a&gt;, add an &lt;code&gt;.erb&lt;/code&gt; to the end of your post&amp;#39;s extension, and you&amp;#39;re done! &lt;code&gt;.markdown.erb&lt;/code&gt; works, as does &lt;code&gt;.md.erb&lt;/code&gt;, or any set of extensions where the ERB-related extension comes after the Markdown-related one.
    &lt;/p&gt;&lt;p&gt;
      These extensions tell Middleman to make one pass of the file and render any ERB that it finds. It then makes a second pass and renders any Markdown found; the file is now entirely converted to HTML.
    &lt;/p&gt;&lt;p&gt;
      Give all new blog posts these extensions by changing this line in your &lt;code&gt;config.rb&lt;/code&gt;:
    &lt;/p&gt;&lt;pre class="code ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# blog.default_extension = ".markdown"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;
      to something like
    &lt;/p&gt;&lt;pre class="code ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;blog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;default_extension&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;".markdown.erb"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;
      This means that all new blog posts created via &lt;code&gt;middleman article &amp;lt;articleName&amp;gt;&lt;/code&gt; will have that extension and be ready to accept partials.
    &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;
      I hope you are ~&lt;strong&gt;fully&lt;/strong&gt;~ convinced of the power of partials. I may revisit them again when I change my media partials from using &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; to &lt;code&gt;&amp;lt;picture&amp;gt;&lt;/code&gt;, which will be a journey in its own right.
    &lt;/p&gt;&lt;p&gt;
      &lt;em&gt;Coming next: custom Markdown rendering and syntax highlighting in code blocks. Read my first Middleman post &lt;a href="/blogging-with-middleman/"&gt;here&lt;/a&gt;.&lt;/em&gt;
    &lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Blogging with Middleman, Pt. 1</title>
    <link rel="alternate" href="https://vgpena.github.io/blogging-with-middleman/"/>
    <id>https://vgpena.github.io/blogging-with-middleman/</id>
    <published>2017-03-08T06:29:00-08:00</published>
    <updated>2017-03-08T18:50:56-08:00</updated>
    <author>
      <name>Violet Peña</name>
    </author>
    <content type="html">&lt;p&gt;
      Side projects are a chance for me to experiment with tools that fall out of the scope of my (amazing) day job. This blog represents my first foray into using &lt;a href="https://middlemanapp.com"&gt;Middleman&lt;/a&gt; for blogging. Here are the first steps you should take when setting up a Middleman blog of your own.
    &lt;/p&gt;&lt;p&gt;
      To begin with, why am I using Middleman? I knew I wanted a static site. I started off with no clear deploy strategy in mind, and I wanted something so simple that I could just SFTP it to my Linode server and forget about it. &lt;a href="http://jxnblk.com/writing/posts/static-site-generation-with-react-and-webpack/"&gt;Static React&lt;/a&gt; was out; as much as I like React and as cool as this setup sounds, I missed writing &lt;a href="/creating-once"&gt;publication-style, semantic markup&lt;/a&gt;. Once I&amp;#39;d figured out that was what I wanted, it was a choice between Middleman and &lt;a href="https://jekyllrb.com/"&gt;Jekyll&lt;/a&gt;. I&amp;#39;ve used both before and had good experiences with each. I went with Middleman because even though I&amp;#39;d used it before, I hadn&amp;#39;t experimented with its blogging functionality.
    &lt;/p&gt;&lt;p&gt;
      As I dug deeper into Middleman, I discovered cool aspects of it that hadn&amp;#39;t been immediately obvious. I&amp;#39;m having a lot of fun with it and completely recommend it to anyone else looking to start up a blog.
    &lt;/p&gt;&lt;h2 class='section-title' id=setting-the-stage-rvm&gt;&lt;a href='#setting-the-stage-rvm' class='section-inner'&gt;Setting the stage: rvm&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;
      Middleman is Ruby-based, so one of the first things I did was install &lt;a href="https://rvm.io/"&gt;Ruby Version Manager&lt;/a&gt;, or rvm, which lets you install and switch between multiple versions of Ruby. This means that a project doesn&amp;#39;t necessarily depend on what you&amp;#39;ve got installed anywhere else &amp;mdash; an upgrade to your system Ruby, or to Project A, won&amp;#39;t affect Project B. Keeping dependencies local and specific has done wonders for my stress levels.
    &lt;/p&gt;&lt;p&gt;
      Once you&amp;#39;ve got rvm installed (I used the cURL command from the above link), you can install new versions with &lt;code&gt;rvm install &amp;lt;versionNumber&amp;gt;&lt;/code&gt;. &lt;code&gt;rvm list&lt;/code&gt; shows you what you&amp;#39;ve already got installed, and switching Ruby versions is &lt;code&gt;rvm use &amp;lt;versionNumber&amp;gt;&lt;/code&gt;. As of writing, the minimum version of Ruby required for up-to-date Middleman is 2.2.2.
    &lt;/p&gt;&lt;h2 class='section-title' id=creating-a-blog&gt;&lt;a href='#creating-a-blog' class='section-inner'&gt;Creating a blog&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;
      To create a blog, follow the first instruction in &lt;a href="https://middlemanapp.com/basics/install/"&gt;the MM docs&lt;/a&gt;, and run &lt;code&gt;gem install middleman&lt;/code&gt;. The next step &amp;mdash; actually setting up the project &amp;mdash; should be blog-specific. Instead of just &lt;code&gt;middleman init&lt;/code&gt;, run &lt;code&gt;middleman init &amp;mdash;template=blog&lt;/code&gt;.
    &lt;/p&gt;&lt;p&gt;
      At this point, you have the framework of a basic Middleman blog in place. Run &lt;code&gt;middleman server&lt;/code&gt; and then go to &lt;code&gt;localhost:4567&lt;/code&gt; to see what&amp;#39;s been generated.
    &lt;/p&gt;&lt;p&gt;
      This stubbed-out blog is a great start, but you probably want to do some customization before you get publishing. Following are some of the first things I recommend doing, in the recommended order.
    &lt;/p&gt;&lt;h2 class='section-title' id=setting-your-time-zone&gt;&lt;a href='#setting-your-time-zone' class='section-inner'&gt;Setting your time zone&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;
      Before writing any articles, manually set your publishing time zone. &lt;code&gt;middleman-blog&lt;/code&gt; ships with a nifty RSS feed generator, but publication times default to UTC, which probably isn&amp;#39;t your local time. So let&amp;#39;s take a sec right now and make sure your hordes of subscribers get accurate readings of when you publish.
    &lt;/p&gt;&lt;p&gt;
      (Also, if you hold off on setting your time zone and you only do it after you&amp;#39;ve written some articles, you will get cryptic errors about dates in frontmatter &amp;quot;not matching&amp;quot; and you will have to switch any articles with UTC timestamps in their frontmatter to bear your local timestamp. I will talk more about frontmatter later.)
    &lt;/p&gt;&lt;p&gt;
      You already have &lt;code&gt;tzinfo-data&lt;/code&gt; installed (you can see it listed in your &lt;code&gt;Gemfile&lt;/code&gt;), so go straight into your &lt;code&gt;config.rb&lt;/code&gt; and add the lines:
    &lt;/p&gt;&lt;pre class="code ruby"&gt;&lt;code&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'tzinfo'&lt;/span&gt;
&lt;span class="no"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;zone&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'US/Pacific'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;
      And this time zone will now be used whenever you create a new article. You can find your time zone on &lt;a href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones"&gt;this list&lt;/a&gt;.
    &lt;/p&gt;&lt;h2 class='section-title' id=customizing-yaml-frontmatter&gt;&lt;a href='#customizing-yaml-frontmatter' class='section-inner'&gt;Customizing YAML frontmatter&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;
      Now you can safely create your first article (!!) from the command line (!!) with &lt;code&gt;middleman article &amp;lt;articleName&amp;gt;&lt;/code&gt;. A file called &lt;code&gt;articleName.html.md&lt;/code&gt; will be created in your &lt;code&gt;source&lt;/code&gt; dir, looking something like
    &lt;/p&gt;&lt;pre class="code yaml"&gt;&lt;code&gt;&lt;span class="nn"&gt;---&lt;/span&gt;
&lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;foo&lt;/span&gt;
&lt;span class="na"&gt;date&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;2017-02-20 10:42 PST&lt;/span&gt;
&lt;span class="na"&gt;tags&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
&lt;span class="nn"&gt;---&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;
      This is &lt;a href="https://en.wikipedia.org/wiki/YAML"&gt;YAML&lt;/a&gt; frontmatter, which provides per-article metadata.
    &lt;/p&gt;&lt;p&gt;
      You may not want this exact frontmatter. For example, I wasn&amp;#39;t interested in tags, but I &lt;em&gt;did&lt;/em&gt; want my articles to have subtitles. In this case, you can write your own article template.
    &lt;/p&gt;&lt;p&gt;
      Find the place in your &lt;code&gt;config.rb&lt;/code&gt; that looks like this (I will be calling it the &amp;quot;blog block&amp;quot;):
    &lt;/p&gt;&lt;pre class="code ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;activate&lt;/span&gt; &lt;span class="ss"&gt;:blog&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;blog&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="c1"&gt;# This will add a prefix to all links, template references and source paths&lt;/span&gt;
  &lt;span class="c1"&gt;# blog.prefix = "blog"&lt;/span&gt;

  &lt;span class="c1"&gt;# blog.permalink = "{year}/{month}/{day}/{title}.html"&lt;/span&gt;
  &lt;span class="c1"&gt;# Matcher for blog source files&lt;/span&gt;
  &lt;span class="c1"&gt;# blog.sources = "{year}-{month}-{day}-{title}.html"&lt;/span&gt;
  &lt;span class="c1"&gt;# blog.taglink = "tags/{tag}.html"&lt;/span&gt;
  &lt;span class="c1"&gt;# blog.layout = "layout"&lt;/span&gt;
  &lt;span class="c1"&gt;# blog.summary_separator = /()/&lt;/span&gt;
  &lt;span class="c1"&gt;# blog.summary_length = 250&lt;/span&gt;
  &lt;span class="c1"&gt;# blog.year_link = "{year}.html"&lt;/span&gt;
  &lt;span class="c1"&gt;# blog.month_link = "{year}/{month}.html"&lt;/span&gt;
  &lt;span class="c1"&gt;# blog.day_link = "{year}/{month}/{day}.html"&lt;/span&gt;
  &lt;span class="c1"&gt;# blog.default_extension = ".markdown"&lt;/span&gt;

  &lt;span class="n"&gt;blog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;tag_template&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"tag.html"&lt;/span&gt;
  &lt;span class="n"&gt;blog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;calendar_template&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"calendar.html"&lt;/span&gt;

  &lt;span class="c1"&gt;# Enable pagination&lt;/span&gt;
  &lt;span class="c1"&gt;# blog.paginate = true&lt;/span&gt;
  &lt;span class="c1"&gt;# blog.per_page = 10&lt;/span&gt;
  &lt;span class="c1"&gt;# blog.page_link = "page/{num}"&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;
      and somewhere in there, put the line
    &lt;/p&gt;&lt;pre class="code ruby"&gt;&lt;code&gt;  &lt;span class="n"&gt;blog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new_article_template&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;expand_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'../source/template.yml'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kp"&gt;__FILE__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;
      and create a file in &lt;code&gt;/source&lt;/code&gt; called &lt;code&gt;template.yml&lt;/code&gt; with the contents:
    &lt;/p&gt;&lt;pre class="code yaml"&gt;&lt;code&gt;&lt;span class="nn"&gt;---&lt;/span&gt;
&lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;lt;%= @title %&amp;gt;&lt;/span&gt;
&lt;span class="na"&gt;subtitle&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
&lt;span class="na"&gt;date&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;lt;%= @date.strftime('%F %R %Z') %&amp;gt;&lt;/span&gt;
&lt;span class="nn"&gt;---&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;
      Now if you run &lt;code&gt;middleman article &amp;lt;articleName&amp;gt;&lt;/code&gt; again, your generated file will have contents like this:
    &lt;/p&gt;&lt;pre class="code yaml"&gt;&lt;code&gt;&lt;span class="nn"&gt;---&lt;/span&gt;
&lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;foo&lt;/span&gt;
&lt;span class="na"&gt;subtitle&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
&lt;span class="na"&gt;date&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;2017-02-20 11:08 PST&lt;/span&gt;
&lt;span class="nn"&gt;---&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;
      &lt;code&gt;title&lt;/code&gt;, &lt;code&gt;subtitle&lt;/code&gt;, and &lt;code&gt;date&lt;/code&gt; will be available as variables to use in blog structuring and templating.
    &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;
      The last thing I recommend in this step is editing (or at least being aware of) this line in the blog block of your config file:
    &lt;/p&gt;&lt;pre class="code ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# blog.default_extension = ".markdown"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;
      Any files generated via &lt;code&gt;middleman article&lt;/code&gt; will have this extension. You can change it to the equivalent but less verbose &lt;code&gt;&amp;quot;.md&amp;quot;&lt;/code&gt;, or to something else entirely (I&amp;#39;m using &lt;code&gt;&amp;quot;.md.erb&amp;quot;&lt;/code&gt;, for reasons I will cover later).
    &lt;/p&gt;&lt;p&gt;
      Remember to comment this line in to see changes ✌🏻
    &lt;/p&gt;&lt;h2 class='section-title' id=pretty-urls-please&gt;&lt;a href='#pretty-urls-please' class='section-inner'&gt;Pretty URLs, please!&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;
      Click into any of your articles and you will see that your URL ends in &lt;code&gt;.html&lt;/code&gt;. Extensions in URLs is &lt;em&gt;not&lt;/em&gt; best-practice web development, as it makes the URL harder to understand and means that changing frameworks (like, for whatever reason, switching from Middleman to .NET) could result in broken links. Pretty URLs give your users more stable, memorable addresses and help keep the inner workings of your site under the hood.
    &lt;/p&gt;&lt;p&gt;
      Middleman, like most devtools, ships with a way to implement pretty URLs. In the blog block, add the line:
    &lt;/p&gt;&lt;pre class="code ruby"&gt;&lt;code&gt;  &lt;span class="n"&gt;activate&lt;/span&gt; &lt;span class="ss"&gt;:directory_indexes&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;
      and you&amp;#39;re set! From your index page, click through to an article, and you will see that the URL now ends in a &lt;code&gt;/&lt;/code&gt; instead of &lt;code&gt;.html&lt;/code&gt;.
    &lt;/p&gt;&lt;p&gt;
      If there are any pages that you &lt;em&gt;don&amp;#39;t&lt;/em&gt; want this done to, register that page in your config, in the &amp;quot;Per-page layout changes&amp;quot; section, like so:
    &lt;/p&gt;&lt;pre class="code ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;page&lt;/span&gt; &lt;span class="s1"&gt;'/&amp;lt;page&amp;gt;.html'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:directory_index&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kp"&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;
      For example, I did this to &lt;a href="/404.html"&gt;my 404 page&lt;/a&gt; so that &lt;a href="https://pages.github.com/"&gt;Github Pages&lt;/a&gt; would pick it up correctly (I will talk about GH Pages more in an upcoming post).
    &lt;/p&gt;&lt;h2 class='section-title' id=writing-and-using-scss&gt;&lt;a href='#writing-and-using-scss' class='section-inner'&gt;Writing and using SCSS&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;
      Luckily for me, Middleman comes equipped to transpile &lt;a href="http://sass-lang.com/"&gt;SCSS&lt;/a&gt;. By default, CSS-related files are looked for in the &lt;code&gt;/stylesheets&lt;/code&gt; folder. If you want to customize this directory, you can do so by adding this line to your &lt;code&gt;config.rb&lt;/code&gt;:
    &lt;/p&gt;&lt;pre class="code ruby"&gt;&lt;code&gt;  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:css_dir&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'styles'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;
      You can now refer to files in that dir from your templates (in my case, &lt;code&gt;.erb&lt;/code&gt; files) using the &lt;code&gt;stylesheet_link_tag&lt;/code&gt; variable.
    &lt;/p&gt;&lt;p&gt;
      Let&amp;#39;s start off by creating &lt;code&gt;/sources/styles/main.css.scss&lt;/code&gt;.
    &lt;/p&gt;&lt;p&gt;
      Multiple extensions may seem mysterious, but that&amp;#39;s actually the crux of Middleman&amp;#39;s power. Middleman lets you mix and match any parsers you want, and parses a file right-to-left according to its extensions. So &lt;code&gt;file.css.scss&lt;/code&gt; means &amp;quot;this file will end up as CSS, but parse it as SCSS first&amp;quot;. In the above section about generating articles, I mentioned that I changed the blog entry extension from the default &lt;code&gt;.html.markdown&lt;/code&gt; to &lt;code&gt;.html.md.erb&lt;/code&gt;. This tells Middleman to parse entries first as ERB (which lets me include fancy partials), then as Markdown, and that the end result is HTML.
    &lt;/p&gt;&lt;p&gt;
      Put some basic SCSS in your &lt;code&gt;main.css.scss&lt;/code&gt; file:
    &lt;/p&gt;&lt;pre class="code scss"&gt;&lt;code&gt;&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;
      and add this line to inside the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; tag of &lt;code&gt;source/layout.erb&lt;/code&gt;:
    &lt;/p&gt;&lt;pre class="code erb"&gt;&lt;code&gt;    &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;stylesheet_link_tag&lt;/span&gt; &lt;span class="ss"&gt;:main&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:media&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"screen"&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;
      And now your site should look about 20 percent cooler.
    &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;
      I hope this gave you a good jumping-off point to blogging with Middleman! Stay tuned for a post about partials, syntax highlighting, and customizing your Markdown parser.
    &lt;/p&gt;&lt;p&gt;
      This is the second post in a series about creating this blog. Read the first post &lt;a href="/creating-once"&gt;here&lt;/a&gt;.
    &lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Creating Once</title>
    <link rel="alternate" href="https://vgpena.github.io/creating-once/"/>
    <id>https://vgpena.github.io/creating-once/</id>
    <published>2017-02-16T06:33:00-08:00</published>
    <updated>2017-02-16T07:47:56-08:00</updated>
    <author>
      <name>Violet Peña</name>
    </author>
    <content type="html">&lt;p&gt;
      Over the past two years, of the twelve or so projects I&amp;#39;ve worked on, exactly one has been a website. The rest have been interactive installations, kiosks, and artworks. While I love this kind of work, I sometimes miss what attracted me to web development in the first place.
    &lt;/p&gt;&lt;p&gt;
      Web development draws its immense power from being part of a flexible, widely-available content distribution system. When you create something for the web, and create it well, that thing is instantly available to billions of people. They can use that creation on devices they already own, via a browser they already own, anywhere on the globe that they can find an internet connection.
    &lt;/p&gt;&lt;p&gt;
      The &lt;a href="https://www.programmableweb.com/news/cope-create-once-publish-everywhere/2009/10/13"&gt;Create Once, Publish Everywhere&lt;/a&gt; paradigm has been inspiring and empowering to me through my time as a web developer. Taking content and making it available to anyone, in any form, is a beautiful goal, and it&amp;#39;s easily in our power to do so. This involves using our tools not just towards democratic aims, but also in a democratic manner. Prizing accessibility, responsiveness, and small payloads helps us create things that can be used to maximum effect by the maximum number of people.
    &lt;/p&gt;&lt;p&gt;
      Installations work towards solving different problems &amp;mdash; instead of dealing with a wide-ranging audience, they are focused on a small, specific one. They don&amp;#39;t need to deal with asset downloads over LTE; they &lt;em&gt;do&lt;/em&gt; need to deal with the position of the sun. They don&amp;#39;t deal with different screen sizes, but with milking maximum power out of a specific machine. They have to worry about decals, traffic flow, and whether the floor is level.
    &lt;/p&gt;&lt;p&gt;
      While I love working with installations, they don&amp;#39;t scratch that democratic itch that drew me into web development. When I found out about the &lt;a href="https://a-k-apart.com/"&gt;10k Apart&lt;/a&gt; &amp;mdash; a challenge to make a site with an under-10k payload &amp;mdash; I saw it as an opportunity to return to my roots and put together a beautiful, lightweight, future-facing website.
    &lt;/p&gt;&lt;p&gt;
      I took up and put down this project a couple of times, and I didn&amp;#39;t end up submitting it to 10k Apart. Lately, however, I have more and more often wanted to write about specific things, only to find I didn&amp;#39;t have a platform on which to write. I had to get this project out the door, if only to make way for future writings.
    &lt;/p&gt;&lt;p&gt;
      As a warm-up, I&amp;#39;ll be writing a short series of posts on what went into making this blog. I hope that anyone blogging with &lt;a href="https://middlemanapp.com/"&gt;Middleman&lt;/a&gt;, learning about &lt;a href="http://webaim.org/"&gt;accessibility&lt;/a&gt;, wondering about &lt;a href="http://bradfrost.com/blog/post/atomic-web-design/"&gt;Atomic Design&lt;/a&gt;, or looking to publish with &lt;a href="https://pages.github.com/"&gt;github pages&lt;/a&gt; will find them helpful.
    &lt;/p&gt;&lt;p&gt;
      I still have some items on my to-do list (&lt;code&gt;&amp;lt;picture&amp;gt;&lt;/code&gt; elements, lazy-loading images, styling tweaks, etc.), but it was important to me to get a v1 of this blog out in the world. In the meantime, check out my payload! ~5k, as long as we&amp;#39;re not counting font files 💥
    &lt;/p&gt;&lt;p&gt;
      Happy reading!
    &lt;/p&gt;</content>
  </entry>
</feed>
